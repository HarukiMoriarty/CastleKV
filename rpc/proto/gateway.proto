syntax = "proto3";

package gateway;

service Db {
  // This is the main entry point for the client. It sends a command
  // to the server and return the result.
  rpc ConnectExecutor(stream Command) returns (stream CommandResult) {}
  // This is used by the traditional concurrency controls where a server
  // connects to another server to execute a plan. The sending server
  // acts like a client to the receiving server, but it sends a plan
  // instead of a command.
  // For now we do not support two phase commit.
  // rpc ConnectPeerExecutor(stream Plan) returns (stream CommandResult) {}
}

// A command is a list of operations to be executed atomically. It is 
// sent by the client to the server. Many commands may be grouped into
// a trasaction.
message Command {
  uint64 cmd_id = 1;
  repeated Operation ops = 2;
}

message Operation {
  uint32 id = 1;
  string name = 2;
  repeated string args = 3;
}

// Result of command execution
message CommandResult {
  uint64 cmd_id = 1;
  repeated OperationResult ops = 2;
  Status status = 3;
  string content = 4;
  bool has_err = 5;
}

message OperationResult {
  uint32 id = 1;
  string content = 2;
  bool has_err = 3;
}

enum Status {
  ABORTED = 0;
  COMMITTED = 1;
}